import React from 'react';
import {
  TextField,
  TextFieldProps,
  InputAdornment,
  FormHelperText,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  FormControlLabel,
  Checkbox,
  Radio,
  RadioGroup,
  Switch,
  Typography,
  Box,
  Tooltip,
  IconButton,
  styled
} from '@mui/material';
import { 
  Help as HelpIcon,
  Visibility as VisibilityIcon,
  VisibilityOff as VisibilityOffIcon
} from '@mui/icons-material';

// Custom props for the FormField component
interface FormFieldProps extends Omit<TextFieldProps, 'type'> {
  type?:
    | 'text'
    | 'email'
    | 'password'
    | 'number'
    | 'tel'
    | 'url'
    | 'search'
    | 'date'
    | 'time'
    | 'datetime-local'
    | 'select'
    | 'multiselect'
    | 'checkbox'
    | 'radio'
    | 'switch'
    | 'textarea';
  options?: Array<{ label: string; value: string | number; disabled?: boolean }>;
  tooltipText?: string;
  loading?: boolean;
  showVisibilityToggle?: boolean;
}

// Styled helper text component
const StyledHelperText = styled(FormHelperText)(({ theme }) => ({
  marginLeft: 0,
  marginRight: 0,
  marginTop: theme.spacing(0.5),
}));

// Create a type for our form control component
type FormControlProps = {
  fullWidth?: boolean;
  error?: boolean;
  required?: boolean;
  disabled?: boolean;
  margin?: 'dense' | 'normal' | 'none';
  variant?: 'outlined' | 'filled' | 'standard';
  size?: 'small' | 'medium';
  children: React.ReactNode;
  sx?: any;
};

/**
 * Enhanced form field component that supports multiple input types
 * with consistent styling and behavior
 */
const FormField: React.FC<FormFieldProps> = ({
  type = 'text',
  name,
  label,
  value,
  onChange,
  onBlur,
  error,
  helperText,
  required,
  disabled,
  fullWidth = true,
  margin = 'normal',
  variant = 'outlined',
  size = 'medium',
  options = [],
  tooltipText,
  loading = false,
  InputProps,
  showVisibilityToggle = false,
  ...rest
}) => {
  // State for password visibility toggle
  const [showPassword, setShowPassword] = React.useState(false);
  
  // Handler for password visibility toggle
  const handleClickShowPassword = () => {
    setShowPassword(!showPassword);
  };
  
  // Handler for default value when undefined
  const handleValue = () => {
    if (value === undefined || value === null) {
      if (type === 'checkbox' || type === 'switch') {
        return false;
      }
      if (type === 'select' || type === 'multiselect') {
        return type === 'multiselect' ? [] : '';
      }
      return '';
    }
    return value;
  };
    
  // Prepare adornment for password fields and tooltips
  const prepareInputProps = () => {
    const baseInputProps: any = { ...InputProps };
    
    if (showVisibilityToggle && type === 'password') {
      baseInputProps.endAdornment = (
        <InputAdornment position="end">
          <IconButton
            aria-label="toggle password visibility"
            onClick={handleClickShowPassword}
            edge="end"
            size="small"
          >
            {showPassword ? <VisibilityOffIcon /> : <VisibilityIcon />}
          </IconButton>
        </InputAdornment>
      );
    }
    
    if (tooltipText) {
      const existingEndAdornment = baseInputProps?.endAdornment;
      
      baseInputProps.endAdornment = (
        <>
          {existingEndAdornment}
          <InputAdornment position="end">
            <Tooltip title={tooltipText} arrow>
              <IconButton edge="end" size="small">
                <HelpIcon fontSize="small" />
              </IconButton>
            </Tooltip>
          </InputAdornment>
        </>
      );
    }
    
    return baseInputProps;
  };
  
  // Simple FormControl component without component prop
  const CustomFormControl: React.FC<FormControlProps> = (props) => {
    return <FormControl {...props}>{props.children}</FormControl>;
  };
  
  // Render appropriate field based on type
  switch (type) {
    case 'select': {
      return (
        <CustomFormControl
          fullWidth={fullWidth}
          error={Boolean(error)}
          required={required}
          disabled={disabled || loading}
          margin={margin}
          variant={variant}
          size={size}
        >
          <InputLabel id={`${name}-label`}>{label}</InputLabel>
          <Select
            labelId={`${name}-label`}
            id={name}
            name={name}
            value={handleValue()}
            onChange={onChange as any}
            onBlur={onBlur as any}
            label={label}
            {...rest as any}
          >
            {options.map((option) => (
              <MenuItem
                key={option.value}
                value={option.value}
                disabled={option.disabled}
              >
                {option.label}
              </MenuItem>
            ))}
          </Select>
          {helperText && (
            <StyledHelperText error={Boolean(error)}>
              {helperText}
            </StyledHelperText>
          )}
        </CustomFormControl>
      );
    }
    
    case 'multiselect': {
      return (
        <CustomFormControl
          fullWidth={fullWidth}
          error={Boolean(error)}
          required={required}
          disabled={disabled || loading}
          margin={margin}
          variant={variant}
          size={size}
        >
          <InputLabel id={`${name}-label`}>{label}</InputLabel>
          <Select
            labelId={`${name}-label`}
            id={name}
            name={name}
            multiple
            value={handleValue()}
            onChange={onChange as any}
            onBlur={onBlur as any}
            label={label}
            {...rest as any}
          >
            {options.map((option) => (
              <MenuItem
                key={option.value}
                value={option.value}
                disabled={option.disabled}
              >
                {option.label}
              </MenuItem>
            ))}
          </Select>
          {helperText && (
            <StyledHelperText error={Boolean(error)}>
              {helperText}
            </StyledHelperText>
          )}
        </CustomFormControl>
      );
    }
    
    case 'checkbox': {
      return (
        <CustomFormControl
          fullWidth={fullWidth}
          error={Boolean(error)}
          required={required}
          disabled={disabled || loading}
          margin={margin}
        >
          <FormControlLabel
            control={
              <Checkbox
                id={name}
                name={name}
                checked={Boolean(handleValue())}
                onChange={onChange as any}
                onBlur={onBlur as any}
                color="primary"
                size={size}
              />
            }
            label={
              <Box sx={{ display: 'flex', alignItems: 'center' }}>
                <Typography variant="body1">{label}</Typography>
                {tooltipText && (
                  <Tooltip title={tooltipText} arrow>
                    <IconButton size="small" sx={{ ml: 0.5 }}>
                      <HelpIcon fontSize="small" />
                    </IconButton>
                  </Tooltip>
                )}
              </Box>
            }
          />
          {helperText && (
            <StyledHelperText error={Boolean(error)}>
              {helperText}
            </StyledHelperText>
          )}
        </CustomFormControl>
      );
    }
    
    case 'radio': {
      return (
        <CustomFormControl
          fullWidth={fullWidth}
          error={Boolean(error)}
          required={required}
          disabled={disabled || loading}
          margin={margin}
        >
          <Typography variant="body1" component="div" gutterBottom>
            {label}
            {tooltipText && (
              <Tooltip title={tooltipText} arrow>
                <IconButton size="small" sx={{ ml: 0.5 }}>
                  <HelpIcon fontSize="small" />
                </IconButton>
              </Tooltip>
            )}
          </Typography>
          <RadioGroup
            aria-label={label}
            name={name}
            value={handleValue()}
            onChange={onChange as any}
            onBlur={onBlur as any}
          >
            {options.map((option) => (
              <FormControlLabel
                key={option.value}
                value={option.value}
                control={<Radio color="primary" size={size} />}
                label={option.label}
                disabled={option.disabled}
              />
            ))}
          </RadioGroup>
          {helperText && (
            <StyledHelperText error={Boolean(error)}>
              {helperText}
            </StyledHelperText>
          )}
        </CustomFormControl>
      );
    }
    
    case 'switch': {
      return (
        <CustomFormControl
          fullWidth={fullWidth}
          error={Boolean(error)}
          required={required}
          disabled={disabled || loading}
          margin={margin}
        >
          <FormControlLabel
            control={
              <Switch
                id={name}
                name={name}
                checked={Boolean(handleValue())}
                onChange={onChange as any}
                onBlur={onBlur as any}
                color="primary"
                size={size}
              />
            }
            label={
              <Box sx={{ display: 'flex', alignItems: 'center' }}>
                <Typography variant="body1">{label}</Typography>
                {tooltipText && (
                  <Tooltip title={tooltipText} arrow>
                    <IconButton size="small" sx={{ ml: 0.5 }}>
                      <HelpIcon fontSize="small" />
                    </IconButton>
                  </Tooltip>
                )}
              </Box>
            }
          />
          {helperText && (
            <StyledHelperText error={Boolean(error)}>
              {helperText}
            </StyledHelperText>
          )}
        </CustomFormControl>
      );
    }
    
    case 'textarea': {
      return (
        <TextField
          id={name}
          name={name}
          label={label}
          value={handleValue()}
          onChange={onChange}
          onBlur={onBlur}
          error={Boolean(error)}
          helperText={helperText}
          required={required}
          disabled={disabled || loading}
          fullWidth={fullWidth}
          multiline
          minRows={4}
          margin={margin}
          variant={variant}
          size={size}
          InputProps={prepareInputProps()}
          {...rest}
        />
      );
    }
    
    // Default for all text-based inputs
    default: {
      return (
        <TextField
          id={name}
          name={name}
          label={label}
          type={showPassword && type === 'password' ? 'text' : type}
          value={handleValue()}
          onChange={onChange}
          onBlur={onBlur}
          error={Boolean(error)}
          helperText={helperText}
          required={required}
          disabled={disabled || loading}
          fullWidth={fullWidth}
          margin={margin}
          variant={variant}
          size={size}
          InputProps={prepareInputProps()}
          {...rest}
        />
      );
    }
  }
};

export default FormField;
export type { FormFieldProps };
