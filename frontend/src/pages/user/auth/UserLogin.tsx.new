import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAppDispatch, useAppSelector } from '../../../hooks/redux';
import { userLogin } from '../../../store/slices/userAuthSlice';
import { Box, Typography, Alert, Link } from '@mui/material';
import { useFormik } from 'formik';
import * as Yup from 'yup';

// Import our shared components
import { 
  SplitLayout, 
  PageHeader, 
  Card, 
  Button, 
  FormField, 
  FormActions 
} from '../../../components';

const UserLogin: React.FC = () => {
  const navigate = useNavigate();
  const dispatch = useAppDispatch();
  const { isLoading, error } = useAppSelector((state) => state.userAuth);
  const [loginError, setLoginError] = useState<string | null>(null);

  const formik = useFormik({
    initialValues: {
      tenantId: '',
      username: '',
      password: '',
    },
    validationSchema: Yup.object({
      tenantId: Yup.string().required('Tenant ID is required'),
      username: Yup.string().required('Username is required'),
      password: Yup.string().required('Password is required'),
    }),
    onSubmit: async (values) => {
      setLoginError(null);
      try {
        const resultAction = await dispatch(userLogin(values));
        if (userLogin.fulfilled.match(resultAction)) {
          navigate('/dashboard');
        } else {
          setLoginError('Invalid tenant ID, username or password');
        }
      } catch (error) {
        setLoginError('An error occurred during login');
      }
    },
  });

  // Left side content with image or illustration
  const leftSideContent = (
    <Box
      sx={{
        height: '100%',
        display: 'flex',
        flexDirection: 'column',
        justifyContent: 'center',
        alignItems: 'center',
        p: 4,
        color: 'white',
      }}
    >
      <Typography variant="h3" component="h1" gutterBottom>
        Multi-Tenant Platform
      </Typography>
      <Typography variant="h6" sx={{ maxWidth: 500, textAlign: 'center', mb: 4 }}>
        Access all your business applications in one secure platform
      </Typography>
      <Box
        component="img"
        src="/assets/images/login-illustration.svg"
        alt="Login illustration"
        sx={{
          maxWidth: '80%',
          maxHeight: 400,
          mt: 2
        }}
      />
    </Box>
  );

  return (
    <SplitLayout
      leftContent={leftSideContent}
      leftBackground="#1976d2"
      leftWidth="50%"
      rightWidth="50%"
      fullHeight
    >
      <Box
        sx={{
          height: '100%',
          display: 'flex',
          flexDirection: 'column',
          justifyContent: 'center',
          alignItems: 'center',
          p: { xs: 2, sm: 4 },
        }}
      >
        <Card
          title={
            <PageHeader 
              title="Welcome Back" 
              subtitle="Log in to access your account"
              headerStyle="compact"
            />
          }
          sx={{ width: '100%', maxWidth: 450 }}
        >
          {(error || loginError) && (
            <Alert severity="error" sx={{ mb: 3 }}>
              {error || loginError}
            </Alert>
          )}

          <form onSubmit={formik.handleSubmit}>
            <FormField
              type="text"
              name="tenantId"
              label="Tenant ID"
              value={formik.values.tenantId}
              onChange={formik.handleChange}
              onBlur={formik.handleBlur}
              error={formik.touched.tenantId && Boolean(formik.errors.tenantId)}
              helperText={formik.touched.tenantId && formik.errors.tenantId as string}
              fullWidth
              required
            />

            <FormField
              type="text"
              name="username"
              label="Username"
              value={formik.values.username}
              onChange={formik.handleChange}
              onBlur={formik.handleBlur}
              error={formik.touched.username && Boolean(formik.errors.username)}
              helperText={formik.touched.username && formik.errors.username as string}
              fullWidth
              required
            />

            <FormField
              type="password"
              name="password"
              label="Password"
              value={formik.values.password}
              onChange={formik.handleChange}
              onBlur={formik.handleBlur}
              error={formik.touched.password && Boolean(formik.errors.password)}
              helperText={formik.touched.password && formik.errors.password as string}
              fullWidth
              required
              showVisibilityToggle
            />

            <Box sx={{ mt: 1, mb: 3, textAlign: 'right' }}>
              <Link href="/user/forgot-password" variant="body2">
                Forgot password?
              </Link>
            </Box>

            <FormActions
              submitText="Log in"
              isSubmitting={isLoading}
              showCancel={false}
              align="center"
            />
          </form>
          
          <Box sx={{ mt: 3, textAlign: 'center' }}>
            <Typography variant="body2">
              Don't have an account?{' '}
              <Link href="/user/register" variant="body2">
                Contact your tenant administrator
              </Link>
            </Typography>
          </Box>
        </Card>
      </Box>
    </SplitLayout>
  );
};

export default UserLogin;
